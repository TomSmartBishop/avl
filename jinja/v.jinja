###-
###- Import jinja helpers
###-
//%- from 'helpers.jin' import deg_to_rad with context
//%- from 'flow.jin' import loop_, loop_if, if_then, if_then_else with context
//%- from 'sequence.jin' import getRndInt, getRndFloat, getRndFloatPos, getRndFloatNeg with context
//%- from 'test.jin' import arrCreate, arrCreateRnd, arrCreateSeq with context
//%- from 'test.jin' import scalarType, scalarCreate, scalarCreateRnd, scalarCreateRndPos, scalarCreateRndNeg with context
//%- from 'vec.jin' import vecReadCmp, vecWriteCmp, vecRetCmp, vecCreate, vecCreateRnd, vecCreateSeq, vecCreateZero with context
//%- from 'check.jin' import checkDim, checkCmpType with context
//%- from 'avl.jin' import func, section, match with context
###-
###- Define global strings so that they can be used like variables
###-
//%- set test = filetype=='test'
//%- set inl = filetype=='inl'
//%- set h = filetype=='hpp'
//%- set vec = 'vec'
//%- set unit_vec = 'unit_vec'
//%- set arr = 'arr'
//%- set _Idx = '_Idx'
//%- set idx = 'idx'
//%- set scalar = 'scalar'
//%- set supplyScalar = '"Supply a scalar of the vectors element type."'
//%- if not test
###-
###- File generation starts from here
###-
#ifndef AVL_$filename.upper()@_$filetype.upper()@
#define AVL_$filename.upper()@_$filetype.upper()@

#pragma once

/// avl: A Vector Library
/// \author Thomas Pollak
namespace avl
$'{\n'@
//%- else
###-
###- For the test cases we need the catch framework
###-
#include "../../ext/catch/catch.hpp"
#include "../../inc/avl.hpp"

using namespace avl;

//% endif
###-
###- All implementations groups are in seperate files
###-
//% include "v_helper_functions.ja"
//% include "v_getters_setters.ja"
//% include "v_length_ops.ja"
//% include "v_spacial_ops.ja"
//% include "v_set_all.ja"
//% include "v_base_math.ja"
//% include "v_general_purpose.ja"

//% if not test
}
#endif // AVL_$filename.upper()@_$filetype.upper()@
//%- endif