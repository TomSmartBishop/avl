//% call section('General purpos functions for '+dim|string+' component vectors', match([2,3,4]))
	
	//% call func('/// Dot product', match([2,3,4]))
	$dim_tpl(dim)@avl_ainl constexpr auto dot(const $vecPar@& vec, const $vecPar@& other) noexcept -> decltype(cmp(vec))
	{
		//% if dim!=2
		static_assert((DIM_N>=-$dim@ && DIM_N<=-2) || (DIM_N>=2 && DIM_N<=$dim@), "Provide a valid dimension parameter [$dim@,$dim@], excluding [-1,1] or remove the template parameter");
		//% endif
		/*% call all_dim(dim, '	return ', ';', ' + ') %*/get<#>(vec)*get<#>(other)/*% endcall %*/
	}
	test_case
	{
		const int idx[] = { 1, 0, 2, 3 };
		const int signs1[] = { 1,-1, 1, 1 };
		const int signs2[] = {-1, 1, 1, 1 };

		//% for dimIdx in range(-dim+1, dim+1)
		//%   if dimIdx<-1 or dimIdx>1
		{
			//% set r = range(dimIdx)
			/*% if dimIdx<0 %*/ /*% set r = range(dim + dimIdx, dim) %*/ /*% endif %*/

			const $vecCreateRnd('test_vec1')@;
			const $vecCreate('test_vec2')@ = {/*% call loop_(range(dim)) %*/-get<#>(test_vec1)/*% endcall %*/};
			//% if dim==2
			const $vecCreate('perpendicular1')@ = { get<1>(test_vec1), -get<0>(test_vec1) };
			const $vecCreate('perpendicular2')@ = { -get<1>(test_vec1), get<0>(test_vec1) };
			//% else
			const $vecCreate('perpendicular1')@ = { /*% call loop_(r) %*/get<idx[#]>(test_vec1)*signs1[$loop.index0@]/*% endcall %*/ };
			const $vecCreate('perpendicular2')@ = { /*% call loop_(r) %*/get<idx[#]>(test_vec1)*signs2[$loop.index0@]/*% endcall %*/ };
			//% endif
			const auto test_vec1_len = len(test_vec1);
			const auto test_vec2_len = len(test_vec2);

			REQUIRE( test_vec1_len == Approx(test_vec2_len) );

			const auto dot_prod_colinear_opposite = dot$dim_tpl_param(dim, dimIdx)@(test_vec1, test_vec2);
			REQUIRE( dot_prod_colinear_opposite == Approx(-test_vec1_len * test_vec2_len) );

			const auto dot_prod_colinear = dot$dim_tpl_param(dim, dimIdx)@(test_vec1, test_vec1);
			REQUIRE( dot_prod_colinear == Approx(test_vec1_len * test_vec1_len) );

			const auto dot_prod_perp1 = dot$dim_tpl_param(dim, dimIdx)@(test_vec1, perpendicular1);
			REQUIRE( dot_prod_perp1 == Approx( /*% call loop_(r, ' + ') %*/get<#>(test_vec1) * get<#>(perpendicular1)/*% endcall %*/ ) );
			const auto dot_prod_perp2 = dot$dim_tpl_param(dim, dimIdx)@(test_vec1, perpendicular2);
			REQUIRE( dot_prod_perp2 == Approx( /*% call loop_(r, ' + ') %*/get<#>(test_vec1) * get<#>(perpendicular2)/*% endcall %*/ ) );
		}
		//%   endif
		//% endfor
	}
	//% endcall
	
//% endcall