//% call section('General purpos functions for '+dim|string+' component vectors', match([2,3,4]))
	
	//% call func('/// Dot product', match([2,3,4]))
	avl_ainl constexpr auto dot(const $vecPar@& vec, decltype(vec)& other) noexcept -> decltype(cmp(vec))
	{
		return /*% call loop_(range(dim), ' + ') %*/get<#>(vec) * get<#>(other)/*% endcall %*/;
	}
	test_case
	{
		const $vecCreateRnd('vec1')@;
		const decltype(vec1) vec2 = {/*% call loop_(range(dim)) %*/-get<#>(vec1)/*% endcall %*/};
		//% if dim==2
		const decltype(vec1) perpendicular = {get<1@>(vec1), -get<0>(vec1)};
		//% else
		const decltype(vec1) perpendicular1 = {/*% call loop_(range(dim-2)) %*/get<#>(vec1)/*% endcall %*/, @get<$dim-1@>(vec1), -get<$dim-2@>(vec1)};
		const decltype(vec1) perpendicular2 = {/*% call loop_(range(dim-2)) %*/get<#>(vec1)/*% endcall %*/, -@get<$dim-1@>(vec1), get<$dim-2@>(vec1)};
		//% endif
		const auto vec1_len = len(vec1);
		const auto vec2_len = len(vec2);

		REQUIRE( vec1_len == Approx(vec2_len) );

		const auto dot_prod_colinear_opposite = dot(vec1, vec2);
		REQUIRE( dot_prod_colinear_opposite == Approx(-vec1_len * vec2_len) );

		const auto dot_prod_colinear = dot(vec1, vec1);
		REQUIRE( dot_prod_colinear == Approx(vec1_len * vec1_len) );

		const auto dot_prod_perp = dot(vec1, perpendicular);
		//% if dim==2
		REQUIRE( dot_prod_perp == Approx( cnst<$scalarType()@>::zero ) );
		//% else
		REQUIRE( dot_prod_perp == Approx( /*% call loop_(range(dim-2), ' + ') %*/get<#>(vec1) * get<#>(perpendicular1)/*% endcall %*/ ) );
		REQUIRE( dot_prod_perp == Approx( /*% call loop_(range(dim-2), ' + ') %*/get<#>(vec1) * get<#>(perpendicular2)/*% endcall %*/ ) );
		//% endif
	}
	//% endcall
	
//% endcall