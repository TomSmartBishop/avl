//% call section('Spacial operations')
//% for mut, mul, info in [('_rd', '', 'radian'),('_dg', ' * cnst<decltype(cmp(vec))>::to_deg', 'degree')]
	//% call func('/// Calculate the angle between two vectors in '+info, match([0]), true)
	avl_ainl_res constexpr auto angle$mut@(const $vecPar@& vec, const decltype(vec) other) noexcept -> decltype(cmp(vec))
	{
		const auto vec_len		= len(vec);
		const auto other_len	= len(other);
		const auto dot_prod		= dot(vec, other);
		return s::acos( dot_prod / ( vec_len * other_len ) )$mul@;
	}
	test_case
	{
		const $scalarCreateRndPos('random_len1')@;
		const $scalarCreateRndPos('random_len2')@;
		const $scalarCreateRndPos('random_len3')@;
		const $scalarCreateRndPos('random_len4')@;
		
		$vecCreateZero('vec_zero')@;
		$vecCreateZero('vec_10x')@;
		set<0>(vec_10x, random_len1);
		$vecCreateZero('vec_01x')@;
		set<1>(vec_01x, random_len2);
		$vecCreateZero('vec_m10x')@;
		set<0>(vec_m10x, -random_len3);
		$vecCreateZero('vec_11x')@;
		set<0>(vec_11x, random_len4);
		set<1>(vec_11x, random_len4);
		
		//TODO: add case for edge case with zero vec
		
		const auto angle0 = angle$mut@(vec_10x, vec_10x);
		REQUIRE( angle0 == Approx( cnst<$scalarType()@>::zero ) );
		
		const auto angle90 = angle$mut@(vec_10x, vec_01x);
		REQUIRE( angle90 == Approx( $if_then_else(mut=='_rd', deg_to_rad(90), 90)@ ) );
		
		const auto angle45a = angle$mut@(vec_10x, vec_11x);
		REQUIRE( angle45a == Approx( $if_then_else(mut=='_rd', deg_to_rad(45), 45)@ ) );
		const auto angle45b = angle$mut@(vec_01x, vec_11x);
		REQUIRE( angle45b == Approx( $if_then_else(mut=='_rd', deg_to_rad(45), 45)@ ) );
		
		const auto angle135 = angle$mut@(vec_m10x, vec_11x);
		REQUIRE( angle135 == Approx( $if_then_else(mut=='_rd', deg_to_rad(135), 135)@ ) );
		
		const auto angle180 = angle$mut@(vec_10x, vec_m10x);
		REQUIRE( angle180 == Approx( $if_then_else(mut=='_rd', deg_to_rad(180), 180)@ ) );
	}
	//%   if dim>=3
	test_case
	{
		const $scalarCreateRndPos('random_len1')@;
		const $scalarCreateRndPos('random_len2')@;
		const $scalarCreateRndPos('random_len3')@;
		const $scalarCreateRndPos('random_len4')@;
		
		$vecCreateZero('vec_zero')@;
		$vecCreateZero('vec_010x')@;
		set<1>(vec_010x, random_len1);
		$vecCreateZero('vec_001x')@;
		set<2>(vec_001x, random_len2);
		$vecCreateZero('vec_0m10x')@;
		set<1>(vec_0m10x, -random_len3);
		$vecCreateZero('vec_011x')@;
		set<1>(vec_011x, random_len4);
		set<2>(vec_011x, random_len4);
		
		const auto angle0 = angle$mut@(vec_010x, vec_010x);
		REQUIRE( angle0 == Approx( cnst<$scalarType()@>::zero ) );
		
		const auto angle90 = angle$mut@(vec_010x, vec_001x);
		REQUIRE( angle90 == Approx( $if_then_else(mut=='_rd', deg_to_rad(90), 90)@ ) );
		
		const auto angle45a = angle$mut@(vec_010x, vec_011x);
		REQUIRE( angle45a == Approx( $if_then_else(mut=='_rd', deg_to_rad(45), 45)@ ) );
		const auto angle45b = angle$mut@(vec_001x, vec_011x);
		REQUIRE( angle45b == Approx( $if_then_else(mut=='_rd', deg_to_rad(45), 45)@ ) );
		
		const auto angle135 = angle$mut@(vec_0m10x, vec_011x);
		REQUIRE( angle135 == Approx( $if_then_else(mut=='_rd', deg_to_rad(135), 135)@ ) );
		
		const auto angle180 = angle$mut@(vec_010x, vec_0m10x);
		REQUIRE( angle180 == Approx( $if_then_else(mut=='_rd', deg_to_rad(180), 180)@ ) );
	}
	//%   endif
	//%   if dim>=4
	test_case
	{
		const $scalarCreateRndPos('random_len1')@;
		const $scalarCreateRndPos('random_len2')@;
		const $scalarCreateRndPos('random_len3')@;
		const $scalarCreateRndPos('random_len4')@;
		
		$vecCreateZero('vec_zero')@;
		$vecCreateZero('vec_0010')@;
		set<2>(vec_0010, random_len1);
		$vecCreateZero('vec_0001')@;
		set<3>(vec_0001, random_len2);
		$vecCreateZero('vec_00m10')@;
		set<2>(vec_00m10, -random_len3);
		$vecCreateZero('vec_0011')@;
		set<2>(vec_0011, random_len4);
		set<3>(vec_0011, random_len4);
		
		const auto angle0 = angle$mut@(vec_0010, vec_0010);
		REQUIRE( angle0 == Approx( cnst<$scalarType()@>::zero ) );
		
		const auto angle90 = angle$mut@(vec_0010, vec_0001);
		REQUIRE( angle90 == Approx( $if_then_else(mut=='_rd', deg_to_rad(90), 90)@ ) );
		
		const auto angle45a = angle$mut@(vec_0010, vec_0011);
		REQUIRE( angle45a == Approx( $if_then_else(mut=='_rd', deg_to_rad(45), 45)@ ) );
		const auto angle45b = angle$mut@(vec_0001, vec_0011);
		REQUIRE( angle45b == Approx( $if_then_else(mut=='_rd', deg_to_rad(45), 45)@ ) );
		
		const auto angle135 = angle$mut@(vec_00m10, vec_0011);
		REQUIRE( angle135 == Approx( $if_then_else(mut=='_rd', deg_to_rad(135), 135)@ ) );
		
		const auto angle180 = angle$mut@(vec_0010, vec_00m10);
		REQUIRE( angle180 == Approx( $if_then_else(mut=='_rd', deg_to_rad(180), 180)@ ) );
	}
	//%   endif
	//% endcall
//% endfor
	//% call func('/// Calculate the area of the spawned triangle'+if_then(dim==4,' (restricted to 3 dimensions)'), match([2,3,4]))
	avl_inl_res constexpr auto area$if_then(dim==4,'3')+'('+if_then_else(dim==2, 'const '+vecPar+'&', vecPar)@ vec, const decltype(vec)& other) noexcept -> decltype(cmp(vec))
	{
		//% if dim==2
		using scalar = decltype(cmp(vec));
		const auto area = cnst<scalar>::half*(get<0>(vec) * get<1>(other) - get<1>(vec) * get<0>(other));
		return area < cnst<scalar>::zero
			? -area
			: area;
		//% else
		return cnst<decltype(cmp(vec))>::half * len( cross$if_then(dim==4,'3')@(vec, other) );
		//% endif
	}
	test_case
	{
		$vecCreateZero('vec_0')@;
		$vecCreateZero('vec_1')@;
		$vecCreateZero('vec_2')@;
		set<0>(vec_0, cnst<$scalarType()@>::one);
		set<1>(vec_1, cnst<$scalarType()@>::one);
		set<0>(vec_2, cnst<$scalarType()@>::minus_one);
		
		const auto a0 = area$if_then(dim==4,'3')@(vec_0, vec_1);
		REQUIRE( a0 == cnst<$scalarType()@>::half );
		
		const auto a1 = area$if_then(dim==4,'3')@(vec_0, vec_0);
		REQUIRE( a1 == cnst<$scalarType()@>::zero );
		
		const auto a2 = area$if_then(dim==4,'3')@(vec_0, vec_2);
		REQUIRE( a2 == cnst<$scalarType()@>::zero );
	}
	//% endcall
	
//% for param, epsilon in [('', 'cnst<decltype(cmp(vec))>::big_epsln'), (', const '+scalarPar+' epsilon', 'epsilon')]
	//% call func('/// Get the direction relative to another point excluding colinear and opposite-but-colinear (faster than get_dir_col)', match([0]))
	avl_ainl_res constexpr auto get_dir(const $vecPar@& vec, const $vecPar@& other$param@) noexcept -> dir
	{
		const auto dotProduct = dot(vec, other);
		if( utl::eqls(dotProduct, decltype(dotProduct){0}, $epsilon@) ) {
			return dir::perpend;
		} else if( dotProduct > decltype(dotProduct){0}) {
			return dir::same;
		} else {
			return dir::opp;
		}
	}
	//% endcall
//% endfor
//%  for mut, rt, res in [('_mk', '', '_res'), ('_set', ' -> void', ''), ('', ' -> decltype(vec)', '_res')]
	//% call func('/// Calculate the cross product'+if_then(dim==4,' (restricted to 3 dimensions)'), match([3,4]))
	avl_ainl$res@ constexpr auto cross$if_then(dim==4,'3')+mut@($if_then(mut=='_mk', 'const ')+vecPar@& vec, const $vecPar@& other) noexcept$rt@
	{
		//% if mut=='_mk'
		return rem_const_ref_t<decltype(vec)> {
		//% else
		set_all( vec,
		//% endif
				get<1>(vec) * get<2>(other) - get<2>(vec) * get<1>(other),
				get<2>(vec) * get<0>(other) - get<0>(vec) * get<2>(other),
				get<0>(vec) * get<1>(other) - get<1>(vec) * get<0>(other)/*% if dim==4 %*/,
				cnst<decltype(cmp(vec))>::zero
				/*% endif %*/
		//% if mut=='_mk'
			};
		//% else
			);
		//%   if mut==''
		return vec;
		//%   endif
		//% endif
	}
	test_case
	{
		$vecCreateZero('vec_100x')@;
		$vecCreateZero('vec_100x_dup')@;
		$vecCreateZero('vec_010x')@;
		$vecCreateZero('expected_res1')@;
		$vecCreateZero('expected_res2')@;
		set<0>(vec_100x, cnst<$scalarType()@>::one);
		set<0>(vec_100x_dup, cnst<$scalarType()@>::one);
		set<1>(vec_010x, cnst<$scalarType()@>::one);
		set<2>(expected_res1, cnst<$scalarType()@>::one);
		set<2>(expected_res2, cnst<$scalarType()@>::minus_one);
		
		//% if mut=='_mk'
		auto result1 = cross$if_then(dim==4, '3')@_mk(vec_100x, vec_010x);
		auto result2 = cross$if_then(dim==4, '3')@_mk(vec_010x, vec_100x_dup);
		//% elif mut=='_set'
		cross$if_then(dim==4, '3')@_set(vec_100x, vec_010x);
		cross$if_then(dim==4, '3')@_set(vec_010x, vec_100x_dup);
		//% else
		auto &result1 = cross$if_then(dim==4, '3')@(vec_100x, vec_010x);
		auto &result2 = cross$if_then(dim==4, '3')@(vec_010x, vec_100x_dup);
		//% endif
		
		//% for i in range(dim)
		//%   if mut=='_set'
		REQUIRE( get<$i@>(vec_100x) == Approx( get<$i@>(expected_res1) ) );
		//%   else
		REQUIRE( get<$i@>(result1) == Approx( get<$i@>(expected_res1) ) );
		//%   endif
		//%  endfor
		
		
		//% for i in range(dim)
		//%   if mut=='_set'
		REQUIRE( get<$i@>(vec_010x) == Approx( get<$i@>(expected_res2) ) );
		//%   else
		REQUIRE( get<$i@>(result2) == Approx( get<$i@>(expected_res2) ) );
		//%   endif
		//%  endfor
	}
	//% endcall
//%   endfor
//% endcall