### General AVL helper functions

//% from 'sequence.jin' import seq, seqRnd with context
//% from 'flow.jin' import loop_ with context

### Match the current demension with the provided list
//% macro match(list_supportedDims)
$(list_supportedDims|join).find(dim|string)!=-1@
//% endmacro

### Splits a function body into header, inline and test code
//% macro func(desc, enableFunc = true, forceTest = false)
//%   set en = (enableFunc|string).strip()|upper == 'TRUE'
//%   set enTest = (forceTest|string).strip()|upper == 'TRUE'
//%   set content = caller()
//%   set ident = content|length - content.lstrip()|length
//%   if filetype=='h' and en
$'\t'*ident + desc@
$content.split('\n')|first@;
$'\t'*ident@
//%  elif filetype=='inl' and en
$'\t'*ident + desc@
$(content.split('test_case')|first)@
//%  elif filetype=='test' and (en or enTest)
//%    for test_case in content.split('test_case')
//%      if loop.index0!=0
$'\t'*ident + 'SECTION( "' + desc.lstrip('/').strip(' ') + '/' + loop.index0|string + '" )'@
$test_case.rstrip('\t').strip('\n')@
$'\t'*ident@
//%      endif
//%    endfor
//%  endif
//% endmacro

### Section
//% macro section(desc, enableSection = true, forceTest = false)
//%   set en = (enableSection|string).strip()|upper == 'TRUE'
//%   set enTest = (forceTest|string).strip()|upper == 'TRUE'
//%   set content = caller()
//%   set ident = content|length - content.lstrip()|length
//%   if filetype=='test' and (en or enTest)
TEST_CASE( "$desc.strip(' ')@", "[$test_vecDef@($dim@)]" )
$'{'@
$content + '}'@
//%   elif en
$'\t'*ident + '/// \defgroup ' + desc +'\n' + '\t'*ident + '/// \\{\n' +'\t'*ident@
$content + '\t'*ident + '/// \\}'@
//%   endif
//% endmacro

