	/// Calculate the cross product for x,y,z, setting w to 0
	avl_ainl_res constexpr auto cross3_mk(const v4& vec, const v4& other) noexcept {//-> rem_const_ref_t<decltype(vec)> { // -> v4 {
		return rem_const_ref_t<decltype(vec)> {
				get<1>(vec) * get<2>(other) - get<2>(vec) * get<1>(other),
				get<2>(vec) * get<0>(other) - get<0>(vec) * get<2>(other),
				get<0>(vec) * get<1>(other) - get<1>(vec) * get<0>(other),
				0
			};
	}

	/// Calculate the cross product for x,y,z, setting w to 0 and assign it to the current vector
	avl_ainl constexpr auto cross3_set(v4& vec, const v4& other) noexcept -> void {
		set_all(get<1>(vec) * get<2>(other) - get<2>(vec) * get<1>(other),
				get<2>(vec) * get<0>(other) - get<0>(vec) * get<2>(other),
				get<0>(vec) * get<1>(other) - get<1>(vec) * get<0>(other),
				0);
	}
	
	/// Calculate the cross product for x,y,z, setting w to 0 and assign it to the current vector
	avl_ainl_res constexpr auto cross3(v4& vec, const v4& other) noexcept -> decltype(vec) {
		set_all(get<1>(vec) * get<2>(other) - get<2>(vec) * get<1>(other),
				get<2>(vec) * get<0>(other) - get<0>(vec) * get<2>(other),
				get<0>(vec) * get<1>(other) - get<1>(vec) * get<0>(other),
				0);
		return vec;
	}
	
	/// Calculate the area of the spawned triangle (using the cross product 0.5*|(a x b)|)
	avl_ainl_res constexpr auto area3(v4 vec, const v4& other) noexcept -> cmp_t<v4> {
		return decltype(vec[0]){0.5}*len(cross3(vec, other));
	}